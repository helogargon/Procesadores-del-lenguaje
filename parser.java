
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\026\002\000\002\003\005\000\002\027\002" +
    "\000\002\003\011\000\002\005\007\000\002\007\005\000" +
    "\002\006\006\000\002\006\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\010\004\000\002\010" +
    "\003\000\002\030\002\000\002\011\006\000\002\011\006" +
    "\000\002\011\007\000\002\011\005\000\002\031\002\000" +
    "\002\032\002\000\002\011\014\000\002\033\002\000\002" +
    "\011\020\000\002\034\002\000\002\011\010\000\002\035" +
    "\002\000\002\011\011\000\002\011\003\000\002\012\003" +
    "\000\002\012\005\000\002\013\005\000\002\013\003\000" +
    "\002\014\003\000\002\014\005\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\006\000\002\016\005\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\036\002\000\002\017\007\000\002" +
    "\017\005\000\002\020\003\000\002\020\005\000\002\020" +
    "\004\000\002\021\005\000\002\021\003\000\002\021\004" +
    "\000\002\022\003\000\002\022\003\000\002\023\005\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\025\006\000\002\025" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\012\005\007\006\006\007\004\031\005\001" +
    "\002\000\004\004\ufff4\001\002\000\004\004\207\001\002" +
    "\000\004\004\ufff5\001\002\000\004\004\ufff6\001\002\000" +
    "\014\002\uffff\005\007\006\006\007\004\031\005\001\002" +
    "\000\004\002\205\001\002\000\004\004\ufffe\001\002\000" +
    "\004\004\015\001\002\000\014\002\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\031\ufffd\001\002\000\004\012\016\001\002\000" +
    "\010\005\007\006\006\007\004\001\002\000\006\010\023" +
    "\013\022\001\002\000\004\004\021\001\002\000\006\010" +
    "\ufff7\013\ufff7\001\002\000\004\014\027\001\002\000\010" +
    "\005\007\006\006\007\004\001\002\000\004\004\025\001" +
    "\002\000\006\010\ufff8\013\ufff8\001\002\000\014\002\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\031\ufffa\001\002\000\026\004" +
    "\033\005\007\006\006\007\004\014\027\030\040\032\030" +
    "\035\031\036\042\037\037\001\002\000\004\012\174\001" +
    "\002\000\004\012\157\001\002\000\030\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\014\uffe3\015\uffe3\030\uffe3\032\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\001\002\000\012\012\153\016\uffcd" +
    "\041\110\052\111\001\002\000\030\004\033\005\007\006" +
    "\006\007\004\014\027\015\152\030\040\032\030\035\031" +
    "\036\042\037\037\001\002\000\030\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\014\ufff2\015\ufff2\030\ufff2\032\ufff2\035\ufff2" +
    "\036\ufff2\037\ufff2\001\002\000\004\004\ufff1\001\002\000" +
    "\004\014\uffe5\001\002\000\016\004\047\012\054\024\053" +
    "\025\045\026\044\027\052\001\002\000\004\016\127\001" +
    "\002\000\004\012\043\001\002\000\020\004\047\012\054" +
    "\024\053\025\045\026\044\027\052\042\056\001\002\000" +
    "\040\010\uffd3\011\uffd3\013\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\001\002\000\040\010\uffd4\011\uffd4" +
    "\013\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4" +
    "\001\002\000\040\010\uffdf\011\uffdf\013\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\043\uffdf\044\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\050\uffdf\051\uffdf\001\002\000\046\010" +
    "\uffcd\011\uffcd\012\112\013\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\041\110\043\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\111\001\002\000\012" +
    "\011\uffc9\013\uffc9\043\uffc9\044\uffc9\001\002\000\040\010" +
    "\uffd5\011\uffd5\013\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\001\002\000\040\010\uffd2\011\uffd2\013\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\043\uffd2\044" +
    "\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\001\002" +
    "\000\040\010\uffd1\011\uffd1\013\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1" +
    "\047\uffd1\050\uffd1\051\uffd1\001\002\000\016\004\047\012" +
    "\054\024\053\025\045\026\044\027\052\001\002\000\026" +
    "\017\071\020\076\021\102\022\077\023\073\045\074\046" +
    "\075\047\103\050\072\051\100\001\002\000\016\004\047" +
    "\012\054\024\053\025\045\026\044\027\052\001\002\000" +
    "\010\013\060\043\061\044\063\001\002\000\004\014\uffe7" +
    "\001\002\000\020\004\uffc7\012\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\042\uffc7\001\002\000\020\004\047\012\054" +
    "\024\053\025\045\026\044\027\052\042\056\001\002\000" +
    "\020\004\uffc6\012\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\042\uffc6\001\002\000\012\011\uffca\013\uffca\043\061\044" +
    "\063\001\002\000\004\014\027\001\002\000\030\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\014\uffe6\015\uffe6\030\uffe6\032" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\001\002\000\012\011\uffc8" +
    "\013\uffc8\043\uffc8\044\uffc8\001\002\000\016\004\047\012" +
    "\054\024\053\025\045\026\044\027\052\001\002\000\016" +
    "\004\uffdc\012\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\001" +
    "\002\000\016\004\uffc1\012\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\001\002\000\016\004\uffd8\012\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\001\002\000\016\004\uffc4\012\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\001\002\000\016\004" +
    "\uffc3\012\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\001\002" +
    "\000\016\004\uffdb\012\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\001\002\000\016\004\uffd9\012\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\001\002\000\016\004\uffc0\012\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\001\002\000\016\004\047" +
    "\012\054\024\053\025\045\026\044\027\052\001\002\000" +
    "\016\004\uffda\012\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\001\002\000\016\004\uffc2\012\uffc2\024\uffc2\025\uffc2\026" +
    "\uffc2\027\uffc2\001\002\000\024\011\uffc5\013\uffc5\017\071" +
    "\020\076\021\102\022\077\023\073\043\uffc5\044\uffc5\001" +
    "\002\000\040\010\uffe0\011\uffe0\013\uffe0\017\071\020\076" +
    "\021\102\022\077\023\073\043\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\001\002\000\016\013\107" +
    "\017\071\020\076\021\102\022\077\023\073\001\002\000" +
    "\040\010\uffd6\011\uffd6\013\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\001\002\000\004\004\126\001\002" +
    "\000\004\025\124\001\002\000\016\004\047\012\054\024" +
    "\053\025\045\026\044\027\052\001\002\000\044\010\uffcb" +
    "\011\uffcb\013\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\052\114\001\002\000\004\025\115\001" +
    "\002\000\004\053\116\001\002\000\044\010\uffbf\011\uffbf" +
    "\013\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf" +
    "\051\uffbf\052\uffbf\001\002\000\006\010\122\013\121\001" +
    "\002\000\020\010\uffde\013\uffde\017\071\020\076\021\102" +
    "\022\077\023\073\001\002\000\040\010\uffd7\011\uffd7\013" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\043\uffd7" +
    "\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\001" +
    "\002\000\016\004\047\012\054\024\053\025\045\026\044" +
    "\027\052\001\002\000\020\010\uffdd\013\uffdd\017\071\020" +
    "\076\021\102\022\077\023\073\001\002\000\004\053\125" +
    "\001\002\000\044\010\uffbe\011\uffbe\013\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\001" +
    "\002\000\042\010\uffcc\011\uffcc\013\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\023\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\001\002\000\016" +
    "\004\047\012\054\024\053\025\045\026\044\027\052\001" +
    "\002\000\016\011\131\017\071\020\076\021\102\022\077" +
    "\023\073\001\002\000\030\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\014\uffef\015\uffef\030\uffef\032\uffef\035\uffef\036\uffef" +
    "\037\uffef\001\002\000\016\011\133\017\071\020\076\021" +
    "\102\022\077\023\073\001\002\000\030\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\014\uffed\015\uffed\030\uffed\032\uffed\035" +
    "\uffed\036\uffed\037\uffed\001\002\000\004\014\027\001\002" +
    "\000\004\040\136\001\002\000\004\012\137\001\002\000" +
    "\020\004\047\012\054\024\053\025\045\026\044\027\052" +
    "\042\056\001\002\000\010\013\141\043\061\044\063\001" +
    "\002\000\030\004\uffe4\005\uffe4\006\uffe4\007\uffe4\014\uffe4" +
    "\015\uffe4\030\uffe4\032\uffe4\035\uffe4\036\uffe4\037\uffe4\001" +
    "\002\000\004\004\145\001\002\000\006\010\uffe2\011\uffe2" +
    "\001\002\000\006\010\146\011\147\001\002\000\012\010" +
    "\uffcd\011\uffcd\041\110\052\111\001\002\000\004\004\145" +
    "\001\002\000\030\004\ufff0\005\ufff0\006\ufff0\007\ufff0\014" +
    "\ufff0\015\ufff0\030\ufff0\032\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\001\002\000\006\010\uffe1\011\uffe1\001\002\000\030\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\014\ufff3\015\ufff3\030\ufff3" +
    "\032\ufff3\035\ufff3\036\ufff3\037\ufff3\001\002\000\040\002" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\014\ufff9\015\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\034\ufff9\035\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\001\002\000\016\004\047\012\054\024\053" +
    "\025\045\026\044\027\052\001\002\000\006\010\122\013" +
    "\155\001\002\000\004\011\156\001\002\000\030\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\014\uffee\015\uffee\030\uffee\032" +
    "\uffee\035\uffee\036\uffee\037\uffee\001\002\000\004\004\160" +
    "\001\002\000\004\016\161\001\002\000\016\004\047\012" +
    "\054\024\053\025\045\026\044\027\052\001\002\000\016" +
    "\011\163\017\071\020\076\021\102\022\077\023\073\001" +
    "\002\000\020\004\047\012\054\024\053\025\045\026\044" +
    "\027\052\042\056\001\002\000\010\011\165\043\061\044" +
    "\063\001\002\000\004\004\166\001\002\000\004\016\167" +
    "\001\002\000\016\004\047\012\054\024\053\025\045\026" +
    "\044\027\052\001\002\000\016\013\171\017\071\020\076" +
    "\021\102\022\077\023\073\001\002\000\004\014\uffe9\001" +
    "\002\000\004\014\027\001\002\000\030\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\014\uffe8\015\uffe8\030\uffe8\032\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\001\002\000\020\004\047\012\054" +
    "\024\053\025\045\026\044\027\052\042\056\001\002\000" +
    "\010\013\176\043\061\044\063\001\002\000\004\033\177" +
    "\001\002\000\004\014\uffec\001\002\000\004\014\027\001" +
    "\002\000\004\034\202\001\002\000\004\014\uffeb\001\002" +
    "\000\004\014\027\001\002\000\030\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\014\uffea\015\uffea\030\uffea\032\uffea\035\uffea" +
    "\036\uffea\037\uffea\001\002\000\004\002\000\001\002\000" +
    "\004\002\001\001\002\000\004\014\ufffc\001\002\000\004" +
    "\014\211\001\002\000\010\005\007\006\006\007\004\001" +
    "\002\000\012\005\007\006\006\007\004\015\216\001\002" +
    "\000\004\004\145\001\002\000\006\010\146\011\215\001" +
    "\002\000\012\005\uffce\006\uffce\007\uffce\015\uffce\001\002" +
    "\000\004\011\223\001\002\000\004\004\uffd0\001\002\000" +
    "\004\004\145\001\002\000\006\010\146\011\222\001\002" +
    "\000\012\005\uffcf\006\uffcf\007\uffcf\015\uffcf\001\002\000" +
    "\014\002\ufffb\005\ufffb\006\ufffb\007\ufffb\031\ufffb\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\010\002\010\003\007\004\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\205\003\007\004\011\001\001\000" +
    "\002\001\001\000\004\026\012\001\001\000\004\005\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\017\006\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\025\001\001\000\004\004" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\035\007\031\010\033\011\034\020" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\112\001\001\000\012\004\035\007" +
    "\031\011\150\020\040\001\001\000\002\001\001\000\004" +
    "\030\141\001\001\000\004\035\133\001\001\000\010\013" +
    "\131\016\045\020\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\013\054\016\045\020\050\021\056\023" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\105\016\045\020\050\001\001\000\006\015\067\024" +
    "\100\001\001\000\012\013\054\016\045\020\050\023\066" +
    "\001\001\000\004\022\061\001\001\000\004\034\064\001" +
    "\001\000\002\001\001\000\014\013\054\016\045\020\050" +
    "\021\063\023\047\001\001\000\002\001\001\000\004\022" +
    "\061\001\001\000\004\007\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\104\016\045\020\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\103\016\045" +
    "\020\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\067\001\001\000\004\015\067\001\001\000\004" +
    "\015\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\117\014\116\016\045\020\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\067" +
    "\001\001\000\002\001\001\000\010\013\122\016\045\020" +
    "\050\001\001\000\004\015\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\127\016" +
    "\045\020\050\001\001\000\004\015\067\001\001\000\002" +
    "\001\001\000\004\015\067\001\001\000\002\001\001\000" +
    "\004\007\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\013\054\016\045\020\050\021\137\023\047\001" +
    "\001\000\004\022\061\001\001\000\002\001\001\000\006" +
    "\012\143\020\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\112\001\001\000\004\020\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\117\014\153\016\045\020\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\161" +
    "\016\045\020\050\001\001\000\004\015\067\001\001\000" +
    "\014\013\054\016\045\020\050\021\163\023\047\001\001" +
    "\000\004\022\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\167\016\045\020\050\001\001\000\004" +
    "\015\067\001\001\000\004\033\171\001\001\000\004\007" +
    "\172\001\001\000\002\001\001\000\014\013\054\016\045" +
    "\020\050\021\174\023\047\001\001\000\004\022\061\001" +
    "\001\000\002\001\001\000\004\031\177\001\001\000\004" +
    "\007\200\001\001\000\002\001\001\000\004\032\202\001" +
    "\001\000\004\007\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\207\001\001\000" +
    "\002\001\001\000\006\004\212\017\211\001\001\000\004" +
    "\004\216\001\001\000\006\012\213\020\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\217\001\001\000\006\012\220\020\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	public class Funcion{
		private int i;//identificador unico para cada funcion
		private String cabecera;
		private LinkedList<String> sentencias= new LinkedList(); //incluye la sentencia y el estilo especial de la misma
		
		public Funcion (){
		}
		public void addSentencia(String sent){
			this.sentencias.add(sent);
		}
		public void setI(int i){
			this.i= i;
		}
		public void setCabecera(String cab){
			this.cabecera=cab;
		}
		public String cabeceraToString(){
			return "<li><a href=\"#"+i+"\">"+cabecera+"</a></li>";
		}
		public String toStringFuncion(){
			String sentencias="";
			for (String sent: this.sentencias){
				sentencias = sentencias + sent + "<br/>";
			}
			String devolver = "<hr/><a name=\""+i+"\">"+cabecera+"{</a>"+ 
					"<br/><div style=\"text-indent: 2 cm\"><code>" +
					sentencias +
					"</code></div>}<br/>"+
					"<a href=\"#inicio\">Inicio</a>" +
					"<br/>" +
					"<a href=\"#"+i+"\">Volver a inicio de funci&oacute;n</a>"+
					"<br/><br/>";

			return devolver;
			
		}
		
	}
	public class Estructura{
		private String cabecera;
		private LinkedList<String> sentencias= new LinkedList(); //incluye la sentencia y el estilo especial de la misma
		
		public Estructura (){
		}
		public void setCabecera(String cab){
			this.cabecera=cab;
		}
		public void addSentencia(String sent){
			this.sentencias.add(sent);
		}
		public String toStringEstructura(){
			String sentencias="";
			for (String sent: this.sentencias){
				sentencias = sentencias + sent + "\n";
			}
			String devolver = cabecera+ "{" +
					"<br/>" +
					"<div style=\"text-indent: 2 cm\">" +
					"<code>" +
					sentencias +
					"</code>" +
					"</div>" +
					"};<br/>";

			return devolver;
			
		}
		
	}
	private LinkedList<String> identificadoresStruct=new LinkedList();
	private BufferedWriter bw;
	private LinkedList<Funcion> cabeceras=new LinkedList();
	private LinkedList<Estructura> estructuras=new LinkedList();
	private String lista;

	public String identStruct(){
		String idents="";
		for (String i: identificadoresStruct){
			idents = idents + i+  ", ";
		}
		return idents;
	}

	public void imprimir(String nombre){

		try{
			bw = new BufferedWriter(new FileWriter(nombre+".html"));
			

			bw.write("<html><head><title>"+nombre+"</title><style>.cte {color:rgb(19,189,72);}.ident {color:rgb(55,40,244);}.palres {color:rgb(0,0,0);font-weight:bold;}</style></head><body><h1><a name=\"inicio\">Programa "+nombre+"</a></h1>");
			
			bw.write("<h2>Funciones</h2>");		

			//Cabeceras
			bw.write("<ul>");
			for(int i=0;i<cabeceras.size();i++){
				cabeceras.get(i).setI(i);
				bw.write(cabeceras.get(i).cabeceraToString());
			}
			bw.write("</ul>");
			for(int i=0;i<cabeceras.size();i++){
				bw.write(cabeceras.get(i).toStringFuncion());
			}

			for(int i=0;i<estructuras.size();i++){
				bw.write(estructuras.get(i).toStringEstructura());
			}

			//Clausura html
			bw.write("</body>\n</html>");

			bw.close();
		}catch(IOException ioe){
			System.out.println("File not exist");
		}
		
		
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= PART PROGRAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= PART 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Funcion f = new Funcion();cabeceras.add(f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PART ::= TYPE NT$0 RESTPART 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int restpartleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int restpartright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object restpart = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cabeceras.getLast().setCabecera(tipo+" "+restpart);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Estructura e = new Estructura(); e.setCabecera("<span class =\"palres\">struct</span> "+"<span class =\"ident\">"+ name.toString()+"</span>");estructuras.add(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PART ::= tstruct ident NT$1 llave_A LFIELD llave_C pcoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lfieldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lfieldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lfield = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RESTPART ::= ident par_A LISTPARAM par_C BLQ 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT="<span class =\"ident\">"+ name.toString()+"</span>"+"("+param+")";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BLQ ::= llave_A SENTLIST llave_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTPARAM ::= LISTPARAM coma TYPE ident 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=param+", "+tipo+" "+"<span class =\"palres\">"+ name.toString()+"</span>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTPARAM ::= TYPE ident 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=tipo+" "+"<span class =\"palres\">"+ name.toString()+"</span>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TYPE ::= tvoid 
            {
              Object RESULT =null;
		RESULT="<span class =\"palres\">void</span>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TYPE ::= tint 
            {
              Object RESULT =null;
		RESULT="<span class =\"palres\">int</span>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TYPE ::= tfloat 
            {
              Object RESULT =null;
		RESULT="<span class =\"palres\">float</span>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTLIST ::= SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
lista="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= TYPE NT$2 LID pcoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		cabeceras.getLast().addSentencia(tipo+" "+lista+";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= ID igual EXP pcoma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cabeceras.getLast().addSentencia(id+"="+exp+";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENT ::= ident par_A LEXP par_C pcoma 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cabeceras.getLast().addSentencia("<span class =\"palres\">"+ name.toString()+"</span>"+"("+lexp+");");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= return_ EXP pcoma 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cabeceras.getLast().addSentencia("<span class =\"palres\">return</span> "+exp+";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$3 ::= 
            {
              Object RESULT =null;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
cabeceras.getLast().addSentencia("<span class =\"palres\">if</span>("+lcond+")<span class =\"palres\">then</span>" + "{"  + "<div style=\"text-indent: 5 cm\">");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object lcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
cabeceras.getLast().addSentencia("</div>"+"}<span class =\"palres\">else</span>{" + "<div style=\"text-indent: 5 cm\">");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENT ::= tif par_A LCOND par_C tthen NT$3 BLQ telse NT$4 BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object lcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		cabeceras.getLast().addSentencia("</div>}");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$5 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object lcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object name2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
cabeceras.getLast().addSentencia("<span class =\"palres\">for</span>("+name.toString()+"="+exp+";"+lcond+";"+name2.toString()+"="+exp2+")"+ "{" + "<div style=\"text-indent: 5 cm\">");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENT ::= tfor par_A ident igual EXP pcoma LCOND pcoma ident igual EXP par_C NT$5 BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object lcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object name2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		cabeceras.getLast().addSentencia("</div>"+"}");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$6 ::= 
            {
              Object RESULT =null;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
cabeceras.getLast().addSentencia("<span class =\"palres\">while</span>("+lcond+")"+ "{"  + "<div style=\"text-indent: 5 cm\">");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENT ::= twhile par_A LCOND par_C NT$6 BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		cabeceras.getLast().addSentencia("</div>"+"}");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$7 ::= 
            {
              Object RESULT =null;
cabeceras.getLast().addSentencia("<span class =\"palres\">do</span>{" + "<div style=\"text-indent: 5 cm\">");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENT ::= tdo NT$7 BLQ tuntil par_A LCOND par_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lcond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cabeceras.getLast().addSentencia("</div>}<span class =\"palres\">until</span>("+lcond+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENT ::= BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LID ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista= lista+id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LID ::= LID coma ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista=lista+", "+id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= exp1+" "+op+" "+exp2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP ::= FACTOR 
            {
              Object RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object factor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=factor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LEXP ::= EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LEXP ::= LEXP coma EXP 
            {
              Object RESULT =null;
		int lexp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lexp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=lexp1+", "+exp1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP ::= op_sum 
            {
              Object RESULT =null;
		RESULT="+";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP ::= op_sub 
            {
              Object RESULT =null;
		RESULT="-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OP ::= op_mul 
            {
              Object RESULT =null;
		RESULT="*";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OP ::= op_div 
            {
              Object RESULT =null;
		RESULT="/";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OP ::= op_mod 
            {
              Object RESULT =null;
		RESULT="%";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FACTOR ::= ident par_A LEXP par_C 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="<span class =\"palres\">"+ id.toString()+"</span>"+"("+lexp+")";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FACTOR ::= par_A EXP par_C 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="("+exp+")";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FACTOR ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FACTOR ::= constint 
            {
              Object RESULT =null;
		int constanteintleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constanteintright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object constanteint = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="<span class=\"cte\">"+constanteint.toString()+ "</span>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FACTOR ::= constfloat 
            {
              Object RESULT =null;
		int constantefloatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constantefloatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object constantefloat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= "<span class=\"cte\">"+constantefloat.toString()+ "</span>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FACTOR ::= constlit 
            {
              Object RESULT =null;
		int constantelitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constantelitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object constantelit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= "<span class=\"cte\">"+constantelit.toString()+ "</span>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FACTOR ::= operacion 
            {
              Object RESULT =null;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= "<span class=\"cte\">"+opr.toString()+ "</span>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$8 ::= 
            {
              Object RESULT =null;
		int lfieldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfieldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lfield = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
lista="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LFIELD ::= LFIELD TYPE NT$8 LID pcoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lfieldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lfieldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object lfield = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		estructuras.getLast().addSentencia(tipo+" " +lista+";<br/>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LFIELD",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LFIELD ::= TYPE LID pcoma 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		estructuras.getLast().addSentencia(tipo+" " +lista+";</br>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LFIELD",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ID ::= ident 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="<span class =\"ident\">"+ name.toString()+"</span>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ID ::= ident punto ident 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="<span class =\"ident\">"+ name1.toString()+"</span>"+"."+"<span class =\"ident\">"+ name2.toString()+"</span>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ID ::= ident LDIM 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ldmileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ldmiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ldmi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="<span class =\"ident\">"+ name.toString()+"</span>"+" "+ldmi;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LCOND ::= LCOND OPL LCOND 
            {
              Object RESULT =null;
		int lcond1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcond1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lcond1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opl1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lcond2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lcond2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lcond2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=lcond1+""+opl1+lcond2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LCOND ::= COND 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cond;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LCOND ::= tnot COND 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="!"+cond;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPL ::= tor 
            {
              Object RESULT =null;
		RESULT="||";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPL ::= tand 
            {
              Object RESULT =null;
		RESULT="&&";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COND ::= EXP OPR EXP 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=exp1.toString()+opr.toString()+exp2.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPR ::= igualIgual 
            {
              Object RESULT =null;
		RESULT="==";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPR ::= menor 
            {
              Object RESULT =null;
		RESULT="&lt;";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPR ::= mayor 
            {
              Object RESULT =null;
		RESULT="&gt;";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPR ::= mayorIgual 
            {
              Object RESULT =null;
		RESULT="&gt;=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPR ::= menorIgual 
            {
              Object RESULT =null;
		RESULT="&lt;=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LDIM ::= LDIM corch_A constint corch_C 
            {
              Object RESULT =null;
		int ldimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ldimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ldim = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object constante = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=ldim+"["+"<span class=\"cte\">"+constante.toString()+ "</span>"+"]";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDIM",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LDIM ::= corch_A constint corch_C 
            {
              Object RESULT =null;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object constante = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="["+"<span class=\"cte\">"+constante.toString()+ "</span>"+"]";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDIM",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
