import java_cup.runtime.*;
import java.io.*;
import java.util.*;

action code
{:
	public class Funcion{
		private int i;//identificador unico para cada funcion
		private String cabecera;
		private LinkedList<String> sentencias= new LinkedList(); //incluye la sentencia y el estilo especial de la misma
		
		public Funcion (){
		}
		public void addSentencia(String sent){
			this.sentencias.add(sent);
		}
		public void setI(int i){
			this.i= i;
		}
		public void setCabecera(String cab){
			this.cabecera=cab;
		}
		public String cabeceraToString(){
			return "<li><a href=\"#"+i+"\">"+cabecera+"</a></li>";
		}
		public String toStringFuncion(){
			String devolver = "<a name=\""+i+"\">"+cabecera+"{</a>"+ 
					"<br/>" +
					
					"}<br/>"+
					"<a href=\"#inicio\">Inicio</a>" +
					"<br/>" +
					"<a href=\"#"+i+"\">Volver a inicio de funci&oacute;n</a>"+
					"<br/>";

			return devolver;
			
		}
		
	}
	public class Estructura{
		private String cabecera;
		private LinkedList<String> sentencias= new LinkedList(); //incluye la sentencia y el estilo especial de la misma
		
		public Estructura (){
		}
		public void setCabecera(String cab){
			this.cabecera=cab;
		}
		public void addSentencia(String sent){
			this.sentencias.add(sent);
		}
		public String toStringEstructura(){
			String sentencias="";
			for (String sent: this.sentencias){
				sentencias = sentencias + sent + "\n";
			}
			String devolver = cabecera+ "{" +
					"<br/>" +
					"<div style=\"text-indent: 2 cm\">" +
					"<code>" +
					sentencias +
					"</code>" +
					"</div>" +
					"}<br/>";

			return devolver;
			
		}
		
	}
	private BufferedWriter bw;
	private LinkedList<Funcion> cabeceras=new LinkedList();
	private LinkedList<Estructura> estructuras=new LinkedList();

	public void imprimir(String nombre){

		try{
			bw = new BufferedWriter(new FileWriter(nombre+".html"));
			

			bw.write("<html><title>"+nombre+"</title><body><h1><a name=\"inicio\">Programa "+nombre+"</a></h1>");
			
			bw.write("<h2>Funciones</h2>");		

			//Cabeceras
			bw.write("<ul>");
			for(int i=0;i<cabeceras.size();i++){
				cabeceras.get(i).setI(i);
				bw.write(cabeceras.get(i).cabeceraToString());
			}
			bw.write("</ul>");
			bw.write("<hr/>");
			for(int i=0;i<cabeceras.size();i++){
				bw.write(cabeceras.get(i).toStringFuncion());
			}

			for(int i=0;i<estructuras.size();i++){
				bw.write(estructuras.get(i).toStringEstructura());
			}

			//Clausura html
			bw.write("</body>\n</html>");

			bw.close();
		}catch(IOException ioe){
			System.out.println("File not exist");
		}
		
		
	}
:};

terminal ident, tvoid, tint, tfloat, coma, pcoma, par_A, par_C, llave_A, llave_C, igual, op_sum, op_sub, op_mul, op_div, op_mod, constint, constfloat, constlit, return_, tstruct, tif,tthen,telse,tfor,twhile,tdo,tuntil,punto,tnot,tor,tand,igualIgual,menor,mayor,mayorIgual,menorIgual,corch_A,corch_C;
non terminal PROGRAM, PART, TYPE, RESTPART, LISTPARAM, BLQ, SENTLIST, SENT, LID, EXP, LEXP, OP, FACTOR, LFIELD, ID, LCOND, OPL, COND, OPR, LDIM;


precedence left op_mul, op_div, op_mod, op_sum, op_sub;
precedence left tor, tand;

PROGRAM ::=PART PROGRAM
 | PART;
PART::= TYPE:tipo RESTPART:restpart{:Funcion f = new Funcion(); f.setCabecera(tipo+" "+restpart);cabeceras.add(f);:}
 | tstruct ident:name {:Estructura e = new Estructura(); e.setCabecera("struct "+name.toString());estructuras.add(e);:} llave_A LFIELD:lfield llave_C pcoma;

RESTPART::= ident:name par_A LISTPARAM:param par_C BLQ{:RESULT=name.toString()+"("+param+")";:} ;

BLQ::= llave_A SENTLIST llave_C;

LISTPARAM::= LISTPARAM:param coma TYPE:tipo ident:name{:RESULT=param+", "+tipo+" "+name.toString();:}
 | TYPE:tipo ident:name{:RESULT=tipo+" "+name.toString();:};

TYPE::= tvoid{:RESULT="void";:}
 | tint{:RESULT="int";:}
 | tfloat{:RESULT="float";:};

SENTLIST::= SENTLIST SENT
 | SENT;

SENT::= TYPE LID pcoma
 | ID igual EXP pcoma
 | ident par_A LEXP par_C pcoma
 | return_ EXP pcoma
 | tif par_A LCOND par_C tthen BLQ telse BLQ
 | tfor par_A ident igual EXP pcoma LCOND pcoma ident igual EXP par_C BLQ
 | twhile par_A LCOND par_C BLQ
 | tdo BLQ tuntil par_A LCOND par_C
 | BLQ;

LID::= ID:id{:RESULT=id;:}
 | LID:lid coma ID:id{:RESULT=lid+", "+id;:};

EXP::= EXP OP EXP
 | FACTOR;

OP::= op_sum
 | op_sub
 | op_mul
 | op_div
 | op_mod;

FACTOR::= ident par_A LEXP par_C
 | par_A EXP par_C
 | ID
 | constint
 | constfloat
 | constlit;

LFIELD ::= LFIELD:lfield TYPE:tipo LID:lid pcoma{:estructuras.getLast().addSentencia(tipo+" "+lid+";");:}
  | TYPE:tipo LID:lid pcoma{:estructuras.getLast().addSentencia(tipo+" "+lid+";");:};

ID ::= ident:name{:RESULT=name.toString();:}
 | ident:name1 punto ident:name2{:RESULT=name1.toString()+"."+name2.toString();:}
 | ident:name LDIM:ldmi {:RESULT=name.toString()+" "+ldmi;:};

LCOND ::= LCOND OPL LCOND
 | COND
 | tnot COND;

OPL ::= tor
 | tand;

COND ::= EXP OPR EXP;

OPR::= igualIgual
 | menor
 | mayor
 | mayorIgual
 | menorIgual;

LDIM ::= LDIM:ldim corch_A constint:constante corch_C{:RESULT=ldim+"["+constante.toString()+"]";:}
| corch_A constint:constante corch_C{:RESULT="["+constante.toString()+"]";:};


