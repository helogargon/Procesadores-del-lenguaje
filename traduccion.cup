import java_cup.runtime.*;
import java.io.*;
import java.util.*;

action code
{:
	private BufferedWriter bw;
	private LinkedList<String> cabeceras=new LinkedList();

	public void imprimir(String nombre){
		String n = nombre.substring(0, nombre.length()-4);
		try{
			bw = new BufferedWriter(new FileWriter(n+".html"));
			

			bw.write("<html><title>"+n+"</title><body><h1>Programa "+n+"</h1>");
			
			bw.write("<h2>Funciones</h>");		

			//Cabeceras
			bw.write("<ul>");
			for(int i=0;i<cabeceras.size();i++){
				bw.write("<li><a href=\""+i+"\">"+cabeceras.get(i)+"</a></li>");
			}
			bw.write("</ul>");

			//Clausura html
			bw.write("</body>\n</html>");
			bw.close();
		}catch(IOException ioe){
			System.out.println("File not exist");
		}
		
		
	}
:};

terminal ident, tvoid, tint, tfloat, coma, pcoma, par_A, par_C, llave_A, llave_C, igual, op_sum, op_sub, op_mul, op_div, op_mod, constint, constfloat, constlit, return_, tstruct, tif,tthen,telse,tfor,twhile,tdo,tuntil,punto,tnot,tor,tand,igualIgual,menor,mayor,mayorIgual,menorIgual,corch_A,corch_C;
non terminal PROGRAM, PART, TYPE, RESTPART, LISTPARAM, BLQ, SENTLIST, SENT, LID, EXP, LEXP, OP, FACTOR, LFIELD, ID, LCOND, OPL, COND, OPR, LDIM;


precedence left op_mul, op_div, op_mod, op_sum, op_sub;
precedence left tor, tand;

PROGRAM ::=PART PROGRAM
 | PART;
PART::= TYPE:tipo RESTPART:restpart{:cabeceras.add(tipo+" "+restpart);:}
 | tstruct ident:name llave_A LFIELD llave_C pcoma{:cabeceras.add("struct "+name.toString()+"("+lfield+")");:};

RESTPART::= ident:name par_A LISTPARAM:param par_C BLQ{:RESULT=name.toString()+"("+param+")";:} ;

BLQ::= llave_A SENTLIST llave_C;

LISTPARAM::= LISTPARAM:param coma TYPE:tipo ident:name{:RESULT=param+", "+tipo+" "+name.toString();:}
 | TYPE:tipo ident:name{:RESULT=tipo+" "+name.toString();:};

TYPE::= tvoid{:RESULT="void";:}
 | tint{:RESULT="int";:}
 | tfloat{:RESULT="float";:};

SENTLIST::= SENTLIST SENT
 | SENT;

SENT::= TYPE LID pcoma
 | ID igual EXP pcoma
 | ident par_A LEXP par_C pcoma
 | return_ EXP pcoma
 | tif par_A LCOND par_C tthen BLQ telse BLQ
 | tfor par_A ident igual EXP pcoma LCOND pcoma ident igual EXP par_C BLQ
 | twhile par_A LCOND par_C BLQ
 | tdo BLQ tuntil par_A LCOND par_C
 | BLQ;

LID::= ID
 | LID coma ID;

LEXP::= EXP
 | LEXP coma EXP;

EXP::= EXP OP EXP
 | FACTOR;

OP::= op_sum
 | op_sub
 | op_mul
 | op_div
 | op_mod;

FACTOR::= ident par_A LEXP par_C
 | par_A EXP par_C
 | ID
 | constint
 | constfloat
 | constlit;

LFIELD ::= LFIELD TYPE LID pcoma
  | TYPE LID pcoma;

ID ::= ident
 | ident punto ident
 | ident LDIM;

LCOND ::= LCOND OPL LCOND
 | COND
 | tnot COND;

OPL ::= tor
 | tand;

COND ::= EXP OPR EXP;

OPR::= igualIgual
 | menor
 | mayor
 | mayorIgual
 | menorIgual;

LDIM ::= LDIM corch_A constint corch_C
| corch_A constint corch_C;


